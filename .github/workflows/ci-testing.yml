name: YOLOv3 CI
on:
  push:
    branches:
      - main

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          task: start-measurement
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: ${{ matrix.python-version }}
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          torch=""
          if [ "${{ matrix.torch }}" == "1.8.0" ]; then
            torch="torch==1.8.0 torchvision==0.9.0"
          fi
          pip install -r requirements.txt $torch --extra-index-url https://download.pytorch.org/whl/cpu
      - id: measurement-4
        name: Record Measurement After Install requirements
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Install requirements
          task: get-measurement
      - name: Check environment
        run: "yolo checks

          pip list

          "
      - id: measurement-6
        name: Record Measurement After Check environment
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Check environment
          task: get-measurement
      - name: Test detection
        run:
          "# export PYTHONPATH=\"$PWD\"  # to run '$ python *.py' files in subdirectories\n\
          m=${{ matrix.model }}  # official weights\nb=runs/train/exp/weights/best\
          \  # best.pt checkpoint\npython train.py --imgsz 64 --batch 32 --weights\
          \ $m.pt --cfg $m.yaml --epochs 1 --device cpu  # train\nfor d in cpu; do\
          \  # devices\n  for w in $m $b; do  # weights\n    python val.py --imgsz\
          \ 64 --batch 32 --weights $w.pt --device $d  # val\n    python detect.py\
          \ --imgsz 64 --weights $w.pt --device $d  # detect\n  done\ndone\npython\
          \ hubconf.py --model $m  # hub\n# python models/tf.py --weights $m.pt  #\
          \ build TF model\npython models/yolo.py --cfg $m.yaml  # build PyTorch model\n\
          python export.py --weights $m.pt --img 64 --include torchscript  # export\n\
          python - <<EOF\nimport torch\nim = torch.zeros([1, 3, 64, 64])\nfor path\
          \ in '$m', '$b':\n    model = torch.hub.load('.', 'custom', path=path, source='local')\n\
          \    print(model('data/images/bus.jpg'))\n    model(im)  # warmup, build\
          \ grids for trace\n    torch.jit.trace(model, [im])\nEOF\n"
        shell: bash
      - id: measurement-8
        name: Record Measurement After Test detection
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Test detection
          task: get-measurement
      - name: Test segmentation
        run:
          "m=${{ matrix.model }}-seg  # official weights\nb=runs/train-seg/exp/weights/best\
          \  # best.pt checkpoint\npython segment/train.py --imgsz 64 --batch 32 --weights\
          \ $m.pt --cfg $m.yaml --epochs 1 --device cpu  # train\npython segment/train.py\
          \ --imgsz 64 --batch 32 --weights '' --cfg $m.yaml --epochs 1 --device cpu\
          \  # train\nfor d in cpu; do  # devices\n  for w in $m $b; do  # weights\n\
          \    python segment/val.py --imgsz 64 --batch 32 --weights $w.pt --device\
          \ $d  # val\n    python segment/predict.py --imgsz 64 --weights $w.pt --device\
          \ $d  # predict\n    python export.py --weights $w.pt --img 64 --include\
          \ torchscript --device $d  # export\n  done\ndone\n"
        shell: bash
      - id: measurement-10
        name: Record Measurement After Test segmentation
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Test segmentation
          task: get-measurement
      - name: Test classification
        run:
          "m=${{ matrix.model }}-cls.pt  # official weights\nb=runs/train-cls/exp/weights/best.pt\
          \  # best.pt checkpoint\npython classify/train.py --imgsz 32 --model $m\
          \ --data mnist160 --epochs 1  # train\npython classify/val.py --imgsz 32\
          \ --weights $b --data ../datasets/mnist160  # val\npython classify/predict.py\
          \ --imgsz 32 --weights $b --source ../datasets/mnist160/test/7/60.png  #\
          \ predict\npython classify/predict.py --imgsz 32 --weights $m --source data/images/bus.jpg\
          \  # predict\npython export.py --weights $b --img 64 --include torchscript\
          \  # export\npython - <<EOF\nimport torch\nfor path in '$m', '$b':\n   \
          \ model = torch.hub.load('.', 'custom', path=path, source='local')\nEOF\n"
        shell: bash
      - id: measurement-12
        name: Record Measurement After Test classification
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          label: Test classification
          task: get-measurement
      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@v4
        with:
          json-output: true
          task: display-results
      - name: Save Total Energy Consumption Data
        run: echo '${ steps.final-measurement.outputs.data-total-json }' > total_energy_consumption-1740376413.json
      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption-1740376413.json
    strategy:
      fail-fast: false
      matrix:
        include:
          - model: yolov5n
            os: ubuntu-latest
            python-version: "3.9"
          - model: yolov5n
            os: ubuntu-latest
            python-version: "3.8"
            torch: 1.8.0
        model:
          - yolov5n
        os:
          - ubuntu-latest

        python-version:
          - "3.11"
    timeout-minutes: 60
